@use "sass:math";
//Подключаем шрифты=======================================================
//&display=swap - добавить при подключении через плагин
// vs_code 
@import url("https://fonts.googleapis.com/css?family=Unbounded:regular,700,900&display=swap");
@import url("https://fonts.googleapis.com/css?family=Inter:regular,600,700&display=swap");
@import url("https://fonts.googleapis.com/css?family=Swanky+and+Moo+Moo:regular&display=swap");
// google_fonts


// Шрифт по умолчанию ==============================================================================================================================================================================================================================================================================

$fontSize: 18; // где 14(px) - размер шрифта по умолчанию

// Основные цвета
// $mainColor: #2a2a2a; // цвет шрифта по умолчанию

:root{
	--font-Raleway-Medium: 'Raleway-Medium';

	/* ----------------------------------- */
--bg: #F4F3ED;
--black: #000;
--white: #fff;
--blue: #27A6E5;
--green: #48C95F;
--green-2: #4e6e58;
--white-2: #fefefe;
--yellow: #C8FF00;
--yellow-2: #B4E600;
--orange: #9E5932;

--bg-menu: rgba(240, 240, 240, 0.4);

}
// Настройка адаптивной сетки ===============================================================================================================================================================================================================================================================================================

// Минимальная ширина страницы
$minWidth: 320;
//ширина ограничивающего контэйнера
$WidthContainer: 1275;
// Ширина полотна (макета)
$maxWidth: 1440;
// $maxWidthContainer: 1230;
// Общий отступ у контейнера
// (30 = по 15px слева и справа, 0 = нет отступа)
$containerPadding: 40;
// Ширина срабатывания первого брейкпоинта
$containerWidth: $WidthContainer + $containerPadding;




// Адаптивное свойство (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
	@if ($startSize==0) {
		$startSize: 0.000001;
	}
	@if ($minSize==0) {
		$minSize: 0.000001;
	}

	// Для calc();
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom == $containerWidth and $WidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	// Брейк-пойнт в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плавающего значения
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}
	$flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

	// Получение значения свойства
	$propertyValue: #{"clamp(" toRem($minSize) "," $flyValue "," toRem($startSize) ")"};
	// Если отрицательные значения
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" toRem($startSize) "," $flyValue "," toRem($minSize) ")"};
	}

	// Устанавливаем значение по умолчанию
	@if $keepSize != 1 and $keepSize != 3 {
		@media (min-width: $widthFromMedia) {
			#{$property}: toRem($startSize);
		}
	}
	// Адаптируем размер в промежутке между указанными ширинами вьюпорта
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		// Если поддерживается clamp();
		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}
		// Если не поддерживается clamp();
		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(#{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
		}
	}
	@if $keepSize != 1 and $keepSize != 2 {
		@media (max-width: $widthToMedia) {
			#{$property}: toRem($minSize);
		}
	}
}




//Миксины==============================================
//Rem
@function toRem($value) {
	@return math.div($value, 16) + rem;
}

//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

